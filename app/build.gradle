apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
//apply plugin: 'realm-android'

static def releaseTime() {
    return new Date().format("MMdd", TimeZone.getTimeZone("UTC"))
}

def addFieldsAndPlaceholders = { flavor, items ->
    for (def item : items) {
        flavor.buildConfigField "String", item.key, '"' + item.value + '"'
    }
    flavor.addManifestPlaceholders(items)
}

androidExtensions {
    experimental = true
}

android {
    compileSdkVersion project.ANDROID_BUILD_SDK_VERSION as int
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
    defaultConfig {
        applicationId project.APPLICATION_ID
        minSdkVersion project.ANDROID_BUILD_MIN_SDK_VERSION as int
        targetSdkVersion project.ANDROID_BUILD_TARGET_SDK_VERSION as int
        versionName project.VERSION_NAME
        versionCode project.VERSION_CODE as int
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        addFieldsAndPlaceholders(it, [
                APPID_AMAP : APPID_AMAP,
        ])
        resValue "string", "updatefun_provider_file_authorities", "com.gospell.xs1.app.fileprovider"
        ndk {
            abiFilters "armeabi", "armeabi-v7a"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //apk命名
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "app-${variant.versionCode}-${variant.versionName}-${releaseTime()}.apk"
                }
            }
            ndk {
                // 需要将 x86 架构过滤掉
                abiFilters "armeabi", "armeabi-v7a", "arm64-v8a"
            }
            buildConfigField 'Boolean','IS_DEBUG',"false"
        }
        debug {
            minifyEnabled false
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "app-debug-${variant.versionName}-${releaseTime()}.apk"
                }
            }
            ndk {
                // 需要将 x86 架构过滤掉
                abiFilters "armeabi", "armeabi-v7a", "arm64-v8a"
            }
            buildConfigField 'Boolean','IS_DEBUG',"true"
        }
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/kotlin']
        }
    }
    packagingOptions {
        pickFirst 'META-INF/rxjava.properties'
    }
}
ext.daggerVersion = '2.11'
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    compile project(':library')
    compile 'com.ray:mvpkotlin:0.0.4'
    //DI
    compile "com.google.dagger:dagger:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion SUPPORT_LIBRARY
            }
        }
    }
}